// Light pixel shader
// Calculate diffuse lighting for a single directional light (also texturing)

Texture2D texture0 : register(t0);
Texture2D texture1 : register(t1);
Texture2D texture2 : register(t2);
SamplerState sampler0 : register(s0);

cbuffer LightBuffer : register(b0)
{
	float4 diffuseColour;
	float3 lightDirection;
	float padding;
};

struct InputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 worldPosition : TEXCOORD1;
};

// Calculate lighting intensity based on direction and normal. Combine with light colour.
float4 calculateLighting(float3 lightDirection, float3 normal, float4 diffuse)
{
	float intensity = saturate(dot(normal, lightDirection));
	float4 colour = saturate(diffuse * intensity);
	return colour;
}

float4 main(InputType input) : SV_TARGET
{
	float4 textureColour;
	float4 lightColour;

	// Sample the texture. Calculate light intensity and colour, return light*texture for final pixel colour.
	textureColour = texture0.Sample(sampler0, input.tex);
	lightColour = calculateLighting(-lightDirection, input.normal, diffuseColour);
	
	//assume amplitude is 10
	float heightRange = 10;

	//convert to a value between 0 and 1
	float relHeight = (min(input.worldPosition.y, heightRange / 2) + heightRange / 2) / heightRange;
	
	//ignore negatives
	if (relHeight < 0)
	{
		relHeight = 0;
	}

	//this biases it towards small values
	relHeight = pow(relHeight, 2.5);

	//go between grass and snow based on height
	textureColour = lerp(texture0.Sample(sampler0, input.tex), texture1.Sample(sampler0, input.tex), relHeight);

	//use the normal to calc gradient
	float steepness = 1.0f - pow(input.normal.y, 2);

	//no overhangs, but this is a sanity check
	steepness = max(0.0f, min(1.0f, steepness));

	//go from above to dirt based on steepness
	textureColour = lerp(textureColour, texture2.Sample(sampler0, input.tex), steepness);

	return lightColour * textureColour;
}